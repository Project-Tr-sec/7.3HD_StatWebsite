pipeline {
  agent any

  options {
    timestamps()
    timeout(time: 30, unit: 'MINUTES')
  }

  triggers {
    pollSCM('H/5 * * * *')
  }

  environment {
    VENV_DIR = '.venv'
    PY       = "${WORKSPACE}\\.venv\\Scripts\\python.exe"
    PIP      = "${WORKSPACE}\\.venv\\Scripts\\pip.exe"

    APP_NAME       = 'statwebsite'
    BUILD_ARTIFACT = "build\\${APP_NAME}-${env.BUILD_NUMBER}.zip"
    MONITOR_URL    = ''   // set to a health endpoint to actually ping it
  }

  stages {

    stage('Checkout') {
      steps {
        checkout scm
        bat 'if not exist build mkdir build'
      }
    }

    stage('Setup Python') {
      steps {
        bat """
          python -m venv "%VENV_DIR%"
          "%PY%" -m pip install --upgrade pip wheel setuptools
          if exist requirements.txt ("%PIP%" install -r requirements.txt) else (echo No requirements.txt found)
        """
      }
    }

    stage('Build (artefact)') {
      steps {
        powershell '''
          if (!(Test-Path build)) { New-Item -ItemType Directory -Path build | Out-Null }
          $dest = "$env:BUILD_ARTIFACT"
          if (Test-Path $dest) { Remove-Item $dest -Force }
          $items = Get-ChildItem -Force | Where-Object {
            $_.Name -notin @('.venv','.git','build') -and $_.Name -ne '.gitignore'
          }
          if (-not $items -or $items.Count -eq 0) {
            'empty' | Out-File -Encoding UTF8 -FilePath EMPTY.txt
            $items = Get-ChildItem -Force | Where-Object { $_.Name -in @('EMPTY.txt') }
          }
          Compress-Archive -Path $items -DestinationPath $dest -CompressionLevel Optimal
        '''
        archiveArtifacts artifacts: 'build/*.zip', fingerprint: true
      }
    }

    stage('Unit Tests') {
      steps {
        powershell '''
          & "$env:PY" -m pip install pytest | Out-Null
          $hasTests = Get-ChildItem -Recurse -Include "*test*.py","tests*.py" -ErrorAction SilentlyContinue
          if ($hasTests) {
            try {
              & "$env:PY" -m pytest --junitxml=test-results.xml -v
            } catch {
              Write-Host "pytest returned non-zero; continuing."
            }
          } else {
            Write-Host "No tests detected; creating empty JUnit file."
            '<testsuite name="empty" tests="0"></testsuite>' | Out-File -Encoding UTF8 test-results.xml
          }
        '''
      }
      post {
        always {
          junit testResults: 'test-results.xml', allowEmptyResults: true
          archiveArtifacts artifacts: 'test-results.xml', allowEmptyArchive: true
        }
      }
    }

    stage('Code Quality') {
      steps {
        powershell '''
          $ErrorActionPreference = "Continue"
          & "$env:PY" -m pip install black isort flake8 | Out-Null

          & "$env:PY" -m black --check --diff . ; $black = $LASTEXITCODE
          if ($black -ne 0) { Write-Host "black non-fatal (exit $black)" }

          & "$env:PY" -m isort --check-only --profile black . ; $isort = $LASTEXITCODE
          if ($isort -ne 0) { Write-Host "isort non-fatal (exit $isort)" }

          & "$env:PY" -m flake8 . ; $flake = $LASTEXITCODE
          if ($flake -ne 0) { Write-Host "flake8 non-fatal (exit $flake)" }

          exit 0
        '''
      }
    }

    stage('Security') {
      steps {
        powershell '''
          $ErrorActionPreference = "Continue"
          & "$env:PY" -m pip install pip-audit bandit | Out-Null

          & "$env:PY" -m pip_audit -r requirements.txt -f json -o pip_audit.json
          $pa = $LASTEXITCODE
          if ($pa -ne 0) { Write-Host "pip-audit non-fatal (exit $pa)" }

          & "$env:PY" -m bandit -q -r . -f json -o bandit_report.json
          $bd = $LASTEXITCODE
          if ($bd -ne 0) { Write-Host "bandit non-fatal (exit $bd)" }

          exit 0
        '''
      }
      post {
        always {
          archiveArtifacts artifacts: 'pip_audit.json,bandit_report.json', allowEmptyArchive: true
        }
      }
    }

    stage('Deploy (Staging)') {
      steps {
        echo 'Staging deploy placeholder: artefact published.'
      }
    }

    stage('Release (Promotion)') {
      steps {
        writeFile file: 'RELEASE_NOTES.txt', text: "Release ${env.BUILD_NUMBER} - generated by Jenkins\n"
        archiveArtifacts artifacts: 'RELEASE_NOTES.txt', allowEmptyArchive: true
        echo "Release placeholder complete for build ${env.BUILD_NUMBER}."
      }
    }

    stage('Monitoring & Alerting (Smoke)') {
      steps {
        script {
          if (env.MONITOR_URL?.trim()) {
            powershell '''
              try {
                $resp = Invoke-WebRequest -UseBasicParsing "$env:MONITOR_URL"
                $code = $resp.StatusCode
                @{ status = $code; time = (Get-Date) } | ConvertTo-Json | Set-Content -Path health.json
                if ($code -lt 200 -or $code -ge 400) { Write-Error "Health NOT OK: $code"; exit 1 }
              } catch {
                Write-Host "Health check failed; recording failure."
                @{ status = "error"; msg = "$($_)"; time = (Get-Date) } | ConvertTo-Json | Set-Content -Path health.json
              }
            '''
          } else {
            writeFile file: 'health.json', text: '{"status":"skipped","reason":"MONITOR_URL not set"}'
          }
        }
      }
      post {
        always {
          archiveArtifacts artifacts: 'health.json', allowEmptyArchive: true
        }
      }
    }
  }

  post {
    success { echo 'Pipeline finished' }
    failure { echo 'Pipeline failed â€” check the stage logs above.' }
    always  { echo "Build artefact path (if created): ${env.BUILD_ARTIFACT}" }
  }
}
